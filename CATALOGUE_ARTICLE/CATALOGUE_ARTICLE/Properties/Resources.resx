<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="famille" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\famille.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="exit" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\exit.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ajouter" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ajouter.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="prec" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\prec.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="restart" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\restart.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="_out" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\out.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="reset" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\reset.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="cancel" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\cancel.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="acces" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\acces.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="save" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\save.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="delete" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\delete.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="next" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\next.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="mouvement" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\mouvement.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="catalogue" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\catalogue.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="icone" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\icone.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="connect" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\connect.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="add" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\add.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="document" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\document.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="contact" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\contact.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="stop" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\stop.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="settings" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\settings.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="article" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\article.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="inventaire" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\inventaire.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="users" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\users.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="_in" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\in.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="niveau" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\niveau.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="logout" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\IMG\ACTIONS\logout.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="CREATE_DATABASE" xml:space="preserve">
    <value>CREATE DATABASE catalogue_article</value>
  </data>
  <data name="CREATE_FCT_DELETECONTENU" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION contenu_stock_delete()
  RETURNS trigger AS
$BODY$
DECLARE

BEGIN
	delete from mouvements_stock where contenu = OLD.id;
	RETURN NEW;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION contenu_stock_delete()
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_FCT_INSERTCONTENU" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION contenu_stock_insert()
  RETURNS trigger AS
$BODY$
DECLARE
	type_ character varying;
BEGIN
	select into type_ type_doc from doc_stocks where id = NEW.stock;
	if(type_ = 'EN')then
		insert into mouvements_stock (entree, article, quantite, contenu) values (true, NEW.article, NEW.quantite, NEW.id);
	else
		insert into mouvements_stock (entree, article, quantite, contenu) values (false, NEW.article, -NEW.quantite, NEW.id);
	end if;
	RETURN NEW;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION contenu_stock_insert()
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_FCT_UPDATECONTENU" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION contenu_stock_update()
  RETURNS trigger AS
$BODY$
DECLARE
	type_ character varying;
	mouv_ integer;
BEGIN
	select into type_ type_doc from doc_stocks where id = NEW.stock;	
	if(type_ = 'EN')then
		select mouv_ id from mouvements_stock where entree = true and contenu = OLD.id;
		if(mouv_ is null)then
			insert into mouvements_stock (entree, article, quantite, contenu) values (true, NEW.article, NEW.quantite, OLD.id);
		else
			update mouvements_stock set quantite = NEW.quantite where contenu = OLD.id;
		end if;
	else
		select mouv_ id from mouvements_stock where entree = false and contenu = OLD.id;
		if(mouv_ is null)then
			insert into mouvements_stock (entree, article, quantite, contenu) values (false, NEW.article, -NEW.quantite, OLD.id);
		else
			update mouvements_stock set quantite = -NEW.quantite where contenu = OLD.id;
		end if;
	end if;
	RETURN NEW;
END;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION contenu_stock_update()
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_ACCESFORMULAIRE" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS autorisation_formulaire
(
  id serial NOT NULL,
  niveau integer,
  formulaire integer,
  acces boolean,
  CONSTRAINT autorisation_formulaire_pkey PRIMARY KEY (id),
  CONSTRAINT autorisation_formulaire_formulaire_fkey FOREIGN KEY (formulaire)
      REFERENCES formulaires (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT autorisation_formulaire_niveau_fkey FOREIGN KEY (niveau)
      REFERENCES niveau_acces (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE autorisation_formulaire
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_ACCESRESSOURCE" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS autorisation_ressource
(
  id serial NOT NULL,
  niveau integer,
  ressource integer,
  acces boolean,
  CONSTRAINT autorisation_ressource_pkey PRIMARY KEY (id),
  CONSTRAINT autorisation_ressource_niveau_fkey FOREIGN KEY (niveau)
      REFERENCES niveau_acces (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT autorisation_ressource_ressource_fkey FOREIGN KEY (ressource)
      REFERENCES ressources (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE autorisation_ressource
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_ARTICLE" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS articles
(
  id serial NOT NULL,
  reference character varying,
  designation character varying,
  description character varying,
  marque character varying,
  puv double precision,
  pua double precision,
  date_save timestamp without time zone DEFAULT now(),
  date_update timestamp without time zone DEFAULT now(),
  famille integer,
  CONSTRAINT articles_pkey PRIMARY KEY (id),
  CONSTRAINT articles_famille_fkey FOREIGN KEY (famille)
      REFERENCES familles_article (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE articles
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_CONTENUSTOCK" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS contenu_stock
(
  id serial NOT NULL,
  article integer,
  prix double precision,
  quantite double precision,
  stock integer,
  CONSTRAINT contenu_stock_pkey PRIMARY KEY (id),
  CONSTRAINT contenu_stock_article_fkey FOREIGN KEY (article)
      REFERENCES articles (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT contenu_stock_stock_fkey FOREIGN KEY (stock)
      REFERENCES doc_stocks (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE contenu_stock
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_DOCSTOCK" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS doc_stocks
(
  id serial NOT NULL,
  reference character varying,
  type_doc character varying,
  date_doc date,
  CONSTRAINT doc_stocks_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE doc_stocks
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_FAMILLE" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS familles_article
(
  id serial NOT NULL,
  reference character varying,
  designation character varying,
  description character varying,
  CONSTRAINT familles_article_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE familles_article
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_FORMULAIRE" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS formulaires
(
  id serial NOT NULL,
  code character varying,
  libelle character varying,
  CONSTRAINT formulaire_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE formulaires
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_MOUVSTOCK" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS mouvements_stock
(
  id serial NOT NULL,
  date_save timestamp without time zone DEFAULT now(),
  article integer,
  quantite double precision,
  entree boolean,
  contenu integer,
  CONSTRAINT mouvements_stock_pkey PRIMARY KEY (id),
  CONSTRAINT mouvements_stock_article_fkey FOREIGN KEY (article)
      REFERENCES articles (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE,
  CONSTRAINT mouvements_stock_contenu_fkey FOREIGN KEY (contenu)
      REFERENCES contenu_stock (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE mouvements_stock
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_NIVEAUACCES" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS niveau_acces
(
  id serial NOT NULL,
  designation character varying,
  description character varying,
  super boolean DEFAULT false,
  CONSTRAINT niveau_acces_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE niveau_acces
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_PARAMETRE" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS parametres
(
  id serial NOT NULL,
  affiche_pua boolean,
  affiche_puv boolean,
  affiche_date_save boolean,
  affiche_date_update boolean,
  CONSTRAINT parametres_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE parametres
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_PHOTO" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS photo_article
(
  id serial NOT NULL,
  nom character varying,
  article integer,
  CONSTRAINT photo_article_pkey PRIMARY KEY (id),
  CONSTRAINT photo_article_article_fkey FOREIGN KEY (article)
      REFERENCES articles (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE photo_article
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_RESSOURCE" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS ressources
(
  id serial NOT NULL,
  code character varying,
  libelle character varying,
  formulaire integer,
  CONSTRAINT ressources_pkey PRIMARY KEY (id),
  CONSTRAINT ressources_fourmulaire_fkey FOREIGN KEY (formulaire)
      REFERENCES formulaires (id) MATCH SIMPLE
      ON UPDATE CASCADE ON DELETE CASCADE
)
WITH (
  OIDS=FALSE
);
ALTER TABLE ressources
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TABLE_USERS" xml:space="preserve">
    <value>CREATE TABLE IF NOT EXISTS users
(
  id serial NOT NULL,
  nom character varying,
  prenom character varying,
  identifiant character varying,
  mot_passe character varying,
  actif boolean,
  niveau integer,
  photo character varying,
  CONSTRAINT users_pkey PRIMARY KEY (id),
  CONSTRAINT users_niveau_fkey FOREIGN KEY (niveau)
      REFERENCES niveau_acces (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE users
  OWNER TO postgres;</value>
  </data>
  <data name="CREATE_TRIG_DELETECONTENU" xml:space="preserve">
    <value>CREATE TRIGGER delete
  BEFORE DELETE
  ON contenu_stock
  FOR EACH ROW
  EXECUTE PROCEDURE contenu_stock_delete();</value>
  </data>
  <data name="CREATE_TRIG_INSERTCONTENU" xml:space="preserve">
    <value>CREATE TRIGGER insert
  AFTER INSERT
  ON contenu_stock
  FOR EACH ROW
  EXECUTE PROCEDURE contenu_stock_insert();</value>
  </data>
  <data name="CREATE_TRIG_UPDATECONTENU" xml:space="preserve">
    <value>CREATE TRIGGER update
  AFTER UPDATE
  ON contenu_stock
  FOR EACH ROW
  EXECUTE PROCEDURE contenu_stock_update();</value>
  </data>
  <data name="CREATE_FCT_STOCK" xml:space="preserve">
    <value>CREATE OR REPLACE FUNCTION stock(article_ integer)
  RETURNS double precision AS
$BODY$
declare 
   stock_ double precision;
begin 
	select into stock_ sum(quantite) from mouvements_stock where article = article_;
	if(stock_ is null)then
		stock_ = 0;
	end if;
	RETURN stock_;
end;
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION stock(integer)
  OWNER TO postgres;</value>
  </data>
</root>