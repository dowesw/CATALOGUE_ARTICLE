//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.17929
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CATALOGUE_ARTICLE.Properties {
    using System;
    
    
    /// <summary>
    ///   Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
    /// </summary>
    // Cette classe a été générée automatiquement par la classe StronglyTypedResourceBuilder
    // à l'aide d'un outil, tel que ResGen ou Visual Studio.
    // Pour ajouter ou supprimer un membre, modifiez votre fichier .ResX, puis réexécutez ResGen
    // avec l'option /str ou régénérez votre projet VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("CATALOGUE_ARTICLE.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Remplace la propriété CurrentUICulture du thread actuel pour toutes
        ///   les recherches de ressources à l'aide de cette classe de ressource fortement typée.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _in {
            get {
                object obj = ResourceManager.GetObject("_in", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap _out {
            get {
                object obj = ResourceManager.GetObject("_out", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap acces {
            get {
                object obj = ResourceManager.GetObject("acces", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap add {
            get {
                object obj = ResourceManager.GetObject("add", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap ajouter {
            get {
                object obj = ResourceManager.GetObject("ajouter", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap article {
            get {
                object obj = ResourceManager.GetObject("article", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cancel {
            get {
                object obj = ResourceManager.GetObject("cancel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap catalogue {
            get {
                object obj = ResourceManager.GetObject("catalogue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap connect {
            get {
                object obj = ResourceManager.GetObject("connect", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap contact {
            get {
                object obj = ResourceManager.GetObject("contact", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE DATABASE catalogue_article.
        /// </summary>
        internal static string CREATE_DATABASE {
            get {
                return ResourceManager.GetString("CREATE_DATABASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE OR REPLACE FUNCTION contenu_stock_delete()
        ///  RETURNS trigger AS
        ///$BODY$
        ///DECLARE
        ///
        ///BEGIN
        ///	delete from mouvements_stock where contenu = OLD.id;
        ///	RETURN NEW;
        ///END;
        ///$BODY$
        ///  LANGUAGE plpgsql VOLATILE
        ///  COST 100;
        ///ALTER FUNCTION contenu_stock_delete()
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_FCT_DELETECONTENU {
            get {
                return ResourceManager.GetString("CREATE_FCT_DELETECONTENU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE OR REPLACE FUNCTION contenu_stock_insert()
        ///  RETURNS trigger AS
        ///$BODY$
        ///DECLARE
        ///	type_ character varying;
        ///BEGIN
        ///	select into type_ type_doc from doc_stocks where id = NEW.stock;
        ///	if(type_ = &apos;EN&apos;)then
        ///		insert into mouvements_stock (entree, article, quantite, contenu) values (true, NEW.article, NEW.quantite, NEW.id);
        ///	else
        ///		insert into mouvements_stock (entree, article, quantite, contenu) values (false, NEW.article, -NEW.quantite, NEW.id);
        ///	end if;
        ///	RETURN NEW;
        ///END;
        ///$BODY$
        ///  LANGUAGE pl [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CREATE_FCT_INSERTCONTENU {
            get {
                return ResourceManager.GetString("CREATE_FCT_INSERTCONTENU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE OR REPLACE FUNCTION stock(article_ integer)
        ///  RETURNS double precision AS
        ///$BODY$
        ///declare 
        ///   stock_ double precision;
        ///begin 
        ///	select into stock_ sum(quantite) from mouvements_stock where article = article_;
        ///	if(stock_ is null)then
        ///		stock_ = 0;
        ///	end if;
        ///	RETURN stock_;
        ///end;
        ///$BODY$
        ///  LANGUAGE plpgsql VOLATILE
        ///  COST 100;
        ///ALTER FUNCTION stock(integer)
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_FCT_STOCK {
            get {
                return ResourceManager.GetString("CREATE_FCT_STOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE OR REPLACE FUNCTION contenu_stock_update()
        ///  RETURNS trigger AS
        ///$BODY$
        ///DECLARE
        ///	type_ character varying;
        ///	mouv_ integer;
        ///BEGIN
        ///	select into type_ type_doc from doc_stocks where id = NEW.stock;	
        ///	if(type_ = &apos;EN&apos;)then
        ///		select mouv_ id from mouvements_stock where entree = true and contenu = OLD.id;
        ///		if(mouv_ is null)then
        ///			insert into mouvements_stock (entree, article, quantite, contenu) values (true, NEW.article, NEW.quantite, OLD.id);
        ///		else
        ///			update mouvements_stock set quantite = NE [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CREATE_FCT_UPDATECONTENU {
            get {
                return ResourceManager.GetString("CREATE_FCT_UPDATECONTENU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS autorisation_formulaire
        ///(
        ///  id serial NOT NULL,
        ///  niveau integer,
        ///  formulaire integer,
        ///  acces boolean,
        ///  CONSTRAINT autorisation_formulaire_pkey PRIMARY KEY (id),
        ///  CONSTRAINT autorisation_formulaire_formulaire_fkey FOREIGN KEY (formulaire)
        ///      REFERENCES formulaires (id) MATCH SIMPLE
        ///      ON UPDATE CASCADE ON DELETE CASCADE,
        ///  CONSTRAINT autorisation_formulaire_niveau_fkey FOREIGN KEY (niveau)
        ///      REFERENCES niveau_acces (id) MATCH SIMPLE
        ///      ON UPDATE CASCAD [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CREATE_TABLE_ACCESFORMULAIRE {
            get {
                return ResourceManager.GetString("CREATE_TABLE_ACCESFORMULAIRE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS autorisation_ressource
        ///(
        ///  id serial NOT NULL,
        ///  niveau integer,
        ///  ressource integer,
        ///  acces boolean,
        ///  CONSTRAINT autorisation_ressource_pkey PRIMARY KEY (id),
        ///  CONSTRAINT autorisation_ressource_niveau_fkey FOREIGN KEY (niveau)
        ///      REFERENCES niveau_acces (id) MATCH SIMPLE
        ///      ON UPDATE CASCADE ON DELETE CASCADE,
        ///  CONSTRAINT autorisation_ressource_ressource_fkey FOREIGN KEY (ressource)
        ///      REFERENCES ressources (id) MATCH SIMPLE
        ///      ON UPDATE CASCADE ON DEL [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CREATE_TABLE_ACCESRESSOURCE {
            get {
                return ResourceManager.GetString("CREATE_TABLE_ACCESRESSOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS articles
        ///(
        ///  id serial NOT NULL,
        ///  reference character varying,
        ///  designation character varying,
        ///  description character varying,
        ///  marque character varying,
        ///  puv double precision,
        ///  pua double precision,
        ///  date_save timestamp without time zone DEFAULT now(),
        ///  date_update timestamp without time zone DEFAULT now(),
        ///  famille integer,
        ///  CONSTRAINT articles_pkey PRIMARY KEY (id),
        ///  CONSTRAINT articles_famille_fkey FOREIGN KEY (famille)
        ///      REFERENCES familles_articl [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CREATE_TABLE_ARTICLE {
            get {
                return ResourceManager.GetString("CREATE_TABLE_ARTICLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS contenu_stock
        ///(
        ///  id serial NOT NULL,
        ///  article integer,
        ///  prix double precision,
        ///  quantite double precision,
        ///  stock integer,
        ///  CONSTRAINT contenu_stock_pkey PRIMARY KEY (id),
        ///  CONSTRAINT contenu_stock_article_fkey FOREIGN KEY (article)
        ///      REFERENCES articles (id) MATCH SIMPLE
        ///      ON UPDATE NO ACTION ON DELETE NO ACTION,
        ///  CONSTRAINT contenu_stock_stock_fkey FOREIGN KEY (stock)
        ///      REFERENCES doc_stocks (id) MATCH SIMPLE
        ///      ON UPDATE CASCADE ON DELETE CAS [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CREATE_TABLE_CONTENUSTOCK {
            get {
                return ResourceManager.GetString("CREATE_TABLE_CONTENUSTOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS doc_stocks
        ///(
        ///  id serial NOT NULL,
        ///  reference character varying,
        ///  type_doc character varying,
        ///  date_doc date,
        ///  CONSTRAINT doc_stocks_pkey PRIMARY KEY (id)
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE doc_stocks
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_DOCSTOCK {
            get {
                return ResourceManager.GetString("CREATE_TABLE_DOCSTOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS familles_article
        ///(
        ///  id serial NOT NULL,
        ///  reference character varying,
        ///  designation character varying,
        ///  description character varying,
        ///  CONSTRAINT familles_article_pkey PRIMARY KEY (id)
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE familles_article
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_FAMILLE {
            get {
                return ResourceManager.GetString("CREATE_TABLE_FAMILLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS formulaires
        ///(
        ///  id serial NOT NULL,
        ///  code character varying,
        ///  libelle character varying,
        ///  CONSTRAINT formulaire_pkey PRIMARY KEY (id)
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE formulaires
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_FORMULAIRE {
            get {
                return ResourceManager.GetString("CREATE_TABLE_FORMULAIRE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS mouvements_stock
        ///(
        ///  id serial NOT NULL,
        ///  date_save timestamp without time zone DEFAULT now(),
        ///  article integer,
        ///  quantite double precision,
        ///  entree boolean,
        ///  contenu integer,
        ///  CONSTRAINT mouvements_stock_pkey PRIMARY KEY (id),
        ///  CONSTRAINT mouvements_stock_article_fkey FOREIGN KEY (article)
        ///      REFERENCES articles (id) MATCH SIMPLE
        ///      ON UPDATE CASCADE ON DELETE CASCADE,
        ///  CONSTRAINT mouvements_stock_contenu_fkey FOREIGN KEY (contenu)
        ///      REFERENCES cont [le reste de la chaîne a été tronqué]&quot;;.
        /// </summary>
        internal static string CREATE_TABLE_MOUVSTOCK {
            get {
                return ResourceManager.GetString("CREATE_TABLE_MOUVSTOCK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS niveau_acces
        ///(
        ///  id serial NOT NULL,
        ///  designation character varying,
        ///  description character varying,
        ///  super boolean DEFAULT false,
        ///  CONSTRAINT niveau_acces_pkey PRIMARY KEY (id)
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE niveau_acces
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_NIVEAUACCES {
            get {
                return ResourceManager.GetString("CREATE_TABLE_NIVEAUACCES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS parametres
        ///(
        ///  id serial NOT NULL,
        ///  affiche_pua boolean,
        ///  affiche_puv boolean,
        ///  affiche_date_save boolean,
        ///  affiche_date_update boolean,
        ///  CONSTRAINT parametres_pkey PRIMARY KEY (id)
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE parametres
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_PARAMETRE {
            get {
                return ResourceManager.GetString("CREATE_TABLE_PARAMETRE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS photo_article
        ///(
        ///  id serial NOT NULL,
        ///  nom character varying,
        ///  article integer,
        ///  CONSTRAINT photo_article_pkey PRIMARY KEY (id),
        ///  CONSTRAINT photo_article_article_fkey FOREIGN KEY (article)
        ///      REFERENCES articles (id) MATCH SIMPLE
        ///      ON UPDATE CASCADE ON DELETE CASCADE
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE photo_article
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_PHOTO {
            get {
                return ResourceManager.GetString("CREATE_TABLE_PHOTO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS ressources
        ///(
        ///  id serial NOT NULL,
        ///  code character varying,
        ///  libelle character varying,
        ///  formulaire integer,
        ///  CONSTRAINT ressources_pkey PRIMARY KEY (id),
        ///  CONSTRAINT ressources_fourmulaire_fkey FOREIGN KEY (formulaire)
        ///      REFERENCES formulaires (id) MATCH SIMPLE
        ///      ON UPDATE CASCADE ON DELETE CASCADE
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE ressources
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_RESSOURCE {
            get {
                return ResourceManager.GetString("CREATE_TABLE_RESSOURCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TABLE IF NOT EXISTS users
        ///(
        ///  id serial NOT NULL,
        ///  nom character varying,
        ///  prenom character varying,
        ///  identifiant character varying,
        ///  mot_passe character varying,
        ///  actif boolean,
        ///  niveau integer,
        ///  photo character varying,
        ///  CONSTRAINT users_pkey PRIMARY KEY (id),
        ///  CONSTRAINT users_niveau_fkey FOREIGN KEY (niveau)
        ///      REFERENCES niveau_acces (id) MATCH SIMPLE
        ///      ON UPDATE NO ACTION ON DELETE NO ACTION
        ///)
        ///WITH (
        ///  OIDS=FALSE
        ///);
        ///ALTER TABLE users
        ///  OWNER TO postgres;.
        /// </summary>
        internal static string CREATE_TABLE_USERS {
            get {
                return ResourceManager.GetString("CREATE_TABLE_USERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TRIGGER delete
        ///  BEFORE DELETE
        ///  ON contenu_stock
        ///  FOR EACH ROW
        ///  EXECUTE PROCEDURE contenu_stock_delete();.
        /// </summary>
        internal static string CREATE_TRIG_DELETECONTENU {
            get {
                return ResourceManager.GetString("CREATE_TRIG_DELETECONTENU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TRIGGER insert
        ///  AFTER INSERT
        ///  ON contenu_stock
        ///  FOR EACH ROW
        ///  EXECUTE PROCEDURE contenu_stock_insert();.
        /// </summary>
        internal static string CREATE_TRIG_INSERTCONTENU {
            get {
                return ResourceManager.GetString("CREATE_TRIG_INSERTCONTENU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une chaîne localisée semblable à CREATE TRIGGER update
        ///  AFTER UPDATE
        ///  ON contenu_stock
        ///  FOR EACH ROW
        ///  EXECUTE PROCEDURE contenu_stock_update();.
        /// </summary>
        internal static string CREATE_TRIG_UPDATECONTENU {
            get {
                return ResourceManager.GetString("CREATE_TRIG_UPDATECONTENU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap delete {
            get {
                object obj = ResourceManager.GetObject("delete", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap document {
            get {
                object obj = ResourceManager.GetObject("document", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap exit {
            get {
                object obj = ResourceManager.GetObject("exit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap famille {
            get {
                object obj = ResourceManager.GetObject("famille", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap icone {
            get {
                object obj = ResourceManager.GetObject("icone", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap inventaire {
            get {
                object obj = ResourceManager.GetObject("inventaire", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap logout {
            get {
                object obj = ResourceManager.GetObject("logout", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap mouvement {
            get {
                object obj = ResourceManager.GetObject("mouvement", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap next {
            get {
                object obj = ResourceManager.GetObject("next", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap niveau {
            get {
                object obj = ResourceManager.GetObject("niveau", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap prec {
            get {
                object obj = ResourceManager.GetObject("prec", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap reset {
            get {
                object obj = ResourceManager.GetObject("reset", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap restart {
            get {
                object obj = ResourceManager.GetObject("restart", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap save {
            get {
                object obj = ResourceManager.GetObject("save", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap settings {
            get {
                object obj = ResourceManager.GetObject("settings", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap stop {
            get {
                object obj = ResourceManager.GetObject("stop", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Recherche une ressource localisée de type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap users {
            get {
                object obj = ResourceManager.GetObject("users", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
